#!/usr/bin/env python
#
#                                           .__               __
#   ____ _____    ____   ___________ _______|__| ____ _____ _/  |_  ___________
# _/ ___\\__  \ _/ __ \ /  ___/\__  \\_  __ \  |/    \\__  \\   __\/  _ \_  __ \
# \  \___ / __ \\  ___/ \___ \  / __ \|  | \/  |   |  \/ __ \|  | (  <_> )  | \/
#  \___  >____  /\___  >____  >(____  /__|  |__|___|  (____  /__|  \____/|__|
#      \/     \/     \/     \/      \/              \/     \/                 v1.0
#
# Caesar cipher encryption, decryption, and bruteforce tool
#
# By: Brad Nelson AKA Squirrel
# @redsquirrel_7

import argparse


# Let's parse them args!
parser = argparse.ArgumentParser(description="Encrypts, decrypts, or bruteforce decrypts a textfile encoded with a Caesar Cipher.")
group = parser.add_mutually_exclusive_group()
group.add_argument("-e", "--encrypt", type=int, metavar="", dest="encrypt", help="Encrypt text in file.")
group.add_argument("-d", "--decrypt", type=int, metavar="", dest="decrypt", help="Decrypt text in file.")
group.add_argument("-b", "--bruteforce", type=str, metavar="", dest="bruteforce", help="Bruteforce decryption without shift number.")
parser.add_argument("textfile", type=str, metavar="", help="Textfile")
parsed_args = parser.parse_args()

# Opens text file and encrypts data with given shift number
def encrypt(shift_num,text_file):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

    f = open(str(text_file),"r")
    text = f.read()
    f.close()
    text = text.upper()

    data = []

    for t in text:
        if t.strip() and t in alphabet:
            data.append(alphabet[(alphabet.index(t) + shift_num) % 26])
        else:
            data.append(t)
    output = "".join(data)
    print(str(output))

# Opens text file and decrypts data with given shift number
def decrypt(shift_num,text_file):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

    f = open(str(text_file),"r")
    text = f.read()
    f.close()
    text = text.upper()

    data = []

    for t in text:
        if t.strip() and t in alphabet:
            data.append(alphabet[(alphabet.index(t) - shift_num) % 26])
        else:
            data.append(t)
    output = "".join(data)
    print(str(output))

# Bruteforces text file with all 26 shift numbers
def bruteforce(output_file,text_file):
    print("Bruteforcing...")
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    shift_num = 1

    f = open(str(text_file),"r")
    text = f.read()
    f.close()
    text = text.upper()

    data = []

    print("Writing to output file...")

    while shift_num <= 26:
        for t in text:
            if t.strip() and t in alphabet:
                data.append(alphabet[(alphabet.index(t) + shift_num) % 26])
            else:
                data.append(t)
        output = "".join(data)
        shift_display = 26 - int(shift_num)

        f = open(str(output_file),"a+")
        f.write("Shift number: %s\n" % str(shift_display))
        f.write("Result: %s\n" % str(output))
        f.close()

        shift_num = shift_num + 1
        data = []
        

if parsed_args.encrypt:
    shift_num = int(parsed_args.encrypt)
    text_file = str(parsed_args.textfile)
    encrypt(shift_num,text_file)
elif parsed_args.decrypt:
    shift_num = int(parsed_args.decrypt)
    text_file = str(parsed_args.textfile)
    decrypt(shift_num,text_file)
elif parsed_args.bruteforce:
    output_file = str(parsed_args.bruteforce)
    text_file = str(parsed_args.textfile)
    bruteforce(output_file,text_file)
else:
    print(parser.description)
    exit(0)
        

